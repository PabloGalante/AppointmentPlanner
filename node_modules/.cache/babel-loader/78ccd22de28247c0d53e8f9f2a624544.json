{"ast":null,"code":"var _jsxFileName = \"/Users/pablogalante/Documentos/Programacion/Projects/CodeAcademy Full Stack Engineer/Appointment Planner (React)/src/containers/contactsPage/ContactsPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { TileList } from '../../components/tileList/TileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = ({\n  contacts,\n  setNewContact\n}) => {\n  _s();\n\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const contactList = contacts;\n  const addNewContact = setNewContact;\n  const [currentName, setName] = useState('');\n  const [currentPhone, setPhone] = useState('');\n  const [currentEmail, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (!duplicate) {\n      addNewContact(currentName, currentPhone, currentEmail);\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n\n  useEffect(() => {\n    const evaluation = contactList.every(object => {\n      return object.name !== currentName;\n    });\n\n    if (!evaluation) {\n      setDuplicate(true);\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name already exists!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n  }, [contactList, currentName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: currentName,\n        setName: setName,\n        phone: currentPhone,\n        setPhone: setPhone,\n        email: currentEmail,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        object: contactList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactsPage, \"O1YoXZyDxA1VZbQmAW3R4hwoVw4=\");\n\n_c = ContactsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"sources":["/Users/pablogalante/Documentos/Programacion/Projects/CodeAcademy Full Stack Engineer/Appointment Planner (React)/src/containers/contactsPage/ContactsPage.js"],"names":["React","useState","useEffect","ContactForm","TileList","ContactsPage","contacts","setNewContact","contactList","addNewContact","currentName","setName","currentPhone","setPhone","currentEmail","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","evaluation","every","object","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,QAAT,QAAyB,oCAAzB;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AACzBC,EAAAA,QADyB;AAEzBC,EAAAA;AAFyB,CAAD,KAGpB;AAAA;;AACN;AACF;AACA;AACA;AACC,QAAMC,WAAW,GAAGF,QAApB;AACA,QAAMG,aAAa,GAAGF,aAAtB;AAEA,QAAM,CAACG,WAAD,EAAcC,OAAd,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACW,YAAD,EAAeC,QAAf,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACa,YAAD,EAAeC,QAAf,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;;AAEC,QAAMiB,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA;AACJ;AACA;AACA;;AACG,QAAG,CAACJ,SAAJ,EAAc;AACZP,MAAAA,aAAa,CAACC,WAAD,EAAcE,YAAd,EAA4BE,YAA5B,CAAb;AAEAH,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACD,GAbD;AAeA;AACF;AACA;AACA;;;AACEb,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMmB,UAAU,GAAGb,WAAW,CAACc,KAAZ,CAAmBC,MAAM,IAAI;AAAE,aAAOA,MAAM,CAACC,IAAP,KAAgBd,WAAvB;AAAoC,KAAnE,CAAnB;;AAEA,QAAI,CAACW,UAAL,EAAiB;AACfJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF,GARQ,EAQN,CAACT,WAAD,EAAcE,WAAd,CARM,CAAT;AAUA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACE,QAAA,IAAI,EAAEA,WADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,KAAK,EAAEC,YAHT;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,KAAK,EAAEC,YALT;AAME,QAAA,QAAQ,EAAEC,QANZ;AAOE,QAAA,YAAY,EAAEG;AAPhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AACE,QAAA,MAAM,EAAEV;AADV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CApEM;;GAAMH,Y;;KAAAA,Y","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = ({\r\n    contacts,\r\n    setNewContact\r\n  }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n const contactList = contacts;\r\n const addNewContact = setNewContact;\r\n\r\n const [currentName, setName] = useState('');\r\n const [currentPhone, setPhone] = useState('');\r\n const [currentEmail, setEmail] = useState('');\r\n const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   if(!duplicate){\r\n     addNewContact(currentName, currentPhone, currentEmail);\r\n\r\n     setName('');\r\n     setPhone('');\r\n     setEmail('');\r\n   }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n\r\n    const evaluation = contactList.every( object => { return object.name !== currentName });\r\n\r\n    if( !evaluation ){\r\n      setDuplicate(true);\r\n      return <p>Name already exists!</p>;\r\n    }\r\n  }, [contactList, currentName]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={currentName}\r\n          setName={setName}\r\n          phone={currentPhone}\r\n          setPhone={setPhone}\r\n          email={currentEmail}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList \r\n          object={contactList}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}